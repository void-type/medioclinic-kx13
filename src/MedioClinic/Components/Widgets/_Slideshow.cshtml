@using Microsoft.AspNetCore.Html
@using XperienceAdapter.Models
@using MedioClinic.Models
@using MedioClinic.Components.Widgets
@using MedioClinic.Components.InlineEditors
@model SlideshowViewModel

@inject IPageBuilderDataContextRetriever ContextRetriever

@{
    var editMode = ContextRetriever?.Retrieve()?.EditMode;
    var swiperId = "swiper-" + Guid.NewGuid().ToString().ToLower();
    var dimensionsAreSet = Model?.Width.HasValue == true && Model?.Height.HasValue == true;

    var containerAspectRatio = dimensionsAreSet
        ? (double)Model?.Width / (double)Model?.Height
        : default;

    double GetImageAspectRatio(MediaLibraryFile image) =>
        (double)image?.Width / (double)image?.Height;


    // Builds the widget container size attribute.
    IHtmlContent GetContainerStylingAttribute() =>
        dimensionsAreSet && Model.EnforceDimensions
            ? Html.Raw($"style=\"width:{Model.Width}px; height:{Model.Height}px\"")
            : null;

    // Calculates whether images are responsive or with fixed dimensions.
    string GetImageStylingAttribute(double imageAspectRatio)
    {
        if (dimensionsAreSet && Model?.EnforceDimensions == true)
        {
            int width = Model.Width.Value;
            int height = Model.Height.Value;

            if (imageAspectRatio > containerAspectRatio)
            {
                height = (int)Math.Round(Model.Width.Value * imageAspectRatio);
            }
            else if (imageAspectRatio < containerAspectRatio)
            {
                width = (int)Math.Round(Model.Height.Value * imageAspectRatio);
            }

            return $"width=\"{width}\" height=\"{height}\"";
        }

        return $"class=\"responsive-img\"";
    }

    // Gets the image constraint in case "Enforce dimensions" is checked.
    SizeConstraint GetImageSizeConstraint(double imageAspectRatio)
    {
        if (dimensionsAreSet)
        {
            if (containerAspectRatio >= imageAspectRatio)
            {
                return SizeConstraint.Width(Model.Width.Value);
            }
            else
            {
                return SizeConstraint.Height(Model.Height.Value);
            }
        }

        return SizeConstraint.Empty;
    }

    string GetImageUrl(MediaLibraryFile image, SizeConstraint imageSizeConstraint)
    {
        if (dimensionsAreSet && Model?.EnforceDimensions == true)
        {
            // In edit mode and with "Enforce dimensions (on the live site)",
            // we can leverage the responsive images feature of Xperience to get images resized to fixed dimensions.
            return image?.MediaFileUrl?.WithSizeConstraint(imageSizeConstraint)?.RelativePath;
        }
        else
        {
            // Otherwise, we can get the full sized images and let Materialize CSS resize them via browser-side code.
            return image?.MediaFileUrl?.RelativePath;
        }
    }
}

<div class="swiper-container" id="@swiperId" @GetContainerStylingAttribute()>
    <div class="swiper-wrapper">
        @if (Model?.Images?.Any() == true)
        {
            // Loop through all images.
            foreach (var image in Model.Images)
            {
                if (image != null)
                {
                    var imageAspectRatio = GetImageAspectRatio(image);
                    var stylingAttribute = GetImageStylingAttribute(imageAspectRatio);
                    var imageSizeConstraint = GetImageSizeConstraint(imageAspectRatio);
                    var imageUrl = GetImageUrl(image, imageSizeConstraint);

                    <div class="swiper-slide" id="slide-@image.Guid">
                        <img src="@Html.Raw(imageUrl)" @Html.Raw(stylingAttribute) id="image-@image.Guid" />
                    </div>
                }
            }
        }
    </div>

    @if (editMode == true || Model?.DisplayArrowSigns == true)
    {
        <div class="swiper-button-prev"></div>
        <div class="swiper-button-next"></div>
    }

    @if (editMode == true)
    {
        var model = new SlideshowEditorViewModel
        {
            PropertyName = nameof(SlideshowProperties.ImageGuids),
            MediaLibraryViewModel = Model?.MediaLibraryViewModel,
            Images = Model?.Images,
            SwiperId = swiperId

        };

        <partial name="~/Components/InlineEditors/_SlideshowEditor.cshtml" model="model" />
    }
</div>

<script>
    @{
        var editModeLiteral = editMode.ToString().ToLower();
        var initSwiperLiteral = $"window.medioClinic.slideshowWidget.initSwiper(\"{swiperId}\", {editModeLiteral}, {Model.TransitionDelay}, {Model.TransitionSpeed});";
    }

    // Initialize the current Swiper object.
    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", function () {
                @Html.Raw(initSwiperLiteral)
            });
    } else {
        @Html.Raw(initSwiperLiteral)
    }
</script>
